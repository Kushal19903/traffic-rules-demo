import os

def create_folder_structure(base_path):
    """
    Creates the folder structure for the project.
    """

    # List of directories to create
    dirs = [
        "data/hyps",
        "data/images",
        "data/scripts",
        "DataSet",
        "Helmet",
        "models/hub",
        "models/__pycache__",
        "runs/detect",
        "runs/detect/exp",
        "utils",
        "utils/aws",
        "utils/flask_rest_api",
        "utils/google_app_engine",
        "utils/loggers",
        "utils/loggers/wandb",
        "utils/__pycache__",
        "yolov5",
        "yolov5/.github",
        "yolov5/.github/ISSUE_TEMPLATE",
        "yolov5/.github/workflows",
        "yolov5/classify",
        "yolov5/data",
        "yolov5/data/hyps",
        "yolov5/data/images",
        "yolov5/data/scripts",
        "yolov5/models",
        "yolov5/models/hub",
        "yolov5/models/segment",
        "yolov5/models/__pycache__",
        "yolov5/segment",
        "yolov5/utils",
        "yolov5/utils/aws",
        "yolov5/utils/docker",
        "yolov5/utils/flask_rest_api",
        "yolov5/utils/google_app_engine",
        "yolov5/utils/loggers",
        "yolov5/utils/loggers/clearml",
        "yolov5/utils/loggers/comet",
        "yolov5/utils/loggers/wandb",
        "yolov5/utils/segment",
        "yolov5/utils/__pycache__",
        "__pycache__"
    ]

    # List of files to create (path-based)
    files = [
        "best.pt",
        "detect.py",
        "detect_accuracy.py",
        "emission.jpg",
        "export.py",
        "info.csv",
        "numberplate.jpg",
        "openalpr_ocr.py",
        "Pic.jpg",
        "requirements.txt",
        "run_detection.bat",
        "viedo2.mp4",
        "data/Argoverse.yaml",
        "data/coco.yaml",
        "data/coco128.yaml",
        "data/GlobalWheat2020.yaml",
        "data/Objects365.yaml",
        "data/SKU-110K.yaml",
        "data/VisDrone.yaml",
        "data/VOC.yaml",
        "data/xView.yaml",
        "data/hyps/hyp.Objects365.yaml",
        "data/hyps/hyp.scratch-high.yaml",
        "data/hyps/hyp.scratch-low.yaml",
        "data/hyps/hyp.scratch-med.yaml",
        "data/hyps/hyp.VOC.yaml",
        "data/scripts/download_weights.sh",
        "data/scripts/get_coco.sh",
        "data/scripts/get_coco128.sh",
        "models/common.py",
        "models/experimental.py",
        "models/tf.py",
        "models/yolo.py",
        "models/yolov5l.yaml",
        "models/yolov5m.yaml",
        "models/yolov5n.yaml",
        "models/yolov5s.yaml",
        "models/yolov5x.yaml",
        "models/hub/anchors.yaml",
        "models/hub/yolov3-spp.yaml",
        "models/hub/yolov3-tiny.yaml",
        "models/hub/yolov3.yaml",
        "models/hub/yolov5-bifpn.yaml",
        "models/hub/yolov5-fpn.yaml",
        "models/hub/yolov5-p2.yaml",
        "models/hub/yolov5-p34.yaml",
        "models/hub/yolov5-p6.yaml",
        "models/hub/yolov5-p7.yaml",
        "models/hub/yolov5-panet.yaml",
        "models/hub/yolov5l6.yaml",
        "models/hub/yolov5m6.yaml",
        "models/hub/yolov5n6.yaml",
        "models/hub/yolov5s-ghost.yaml",
        "models/hub/yolov5s-transformer.yaml",
        "models/hub/yolov5s6.yaml",
        "models/hub/yolov5x6.yaml",
        "runs/detect/exp/0.mp4",
        "utils/activations.py",
        "utils/augmentations.py",
        "utils/autoanchor.py",
        "utils/autobatch.py",
        "utils/benchmarks.py",
        "utils/callbacks.py",
        "utils/datasets.py",
        "utils/downloads.py",
        "utils/general.py",
        "utils/loss.py",
        "utils/metrics.py",
        "utils/plots.py",
        "utils/torch_utils.py",
        "utils/__init__.py",
        "utils/aws/mime.sh",
        "utils/aws/resume.py",
        "utils/aws/userdata.sh",
        "utils/flask_rest_api/example_request.py",
        "utils/flask_rest_api/README.md",
        "utils/flask_rest_api/restapi.py",
        "utils/google_app_engine/additional_requirements.txt",
        "utils/google_app_engine/app.yaml",
        "utils/loggers/__init__.py",
        "utils/loggers/wandb/log_dataset.py",
        "utils/loggers/wandb/README.md",
        "utils/loggers/wandb/sweep.py",
        "utils/loggers/wandb/sweep.yaml",
        "utils/loggers/wandb/wandb_utils.py",
        "yolov5/.dockerignore",
        "yolov5/.gitattributes",
        "yolov5/.gitignore",
        "yolov5/benchmarks.py",
        "yolov5/CITATION.cff",
        "yolov5/CONTRIBUTING.md",
        "yolov5/detect.py",
        "yolov5/export.py",
        "yolov5/hubconf.py",
        "yolov5/LICENSE",
        "yolov5/pyproject.toml",
        "yolov5/README.md",
        "yolov5/README.zh-CN.md",
        "yolov5/requirements.txt",
        "yolov5/test.py",
        "yolov5/train.py",
        "yolov5/tutorial.ipynb",
        "yolov5/val.py",
        "yolov5/.github/dependabot.yml",
        "yolov5/.github/ISSUE_TEMPLATE/bug-report.yml",
        "yolov5/.github/ISSUE_TEMPLATE/config.yml",
        "yolov5/.github/ISSUE_TEMPLATE/feature-request.yml",
        "yolov5/.github/ISSUE_TEMPLATE/question.yml",
        "yolov5/.github/workflows/ci-testing.yml",
        "yolov5/.github/workflows/cla.yml",
        "yolov5/.github/workflows/docker.yml",
        "yolov5/.github/workflows/format.yml",
        "yolov5/.github/workflows/links.yml",
        "yolov5/.github/workflows/merge-main-into-prs.yml",
        "yolov5/.github/workflows/stale.yml",
        "yolov5/classify/predict.py",
        "yolov5/classify/train.py",
        "yolov5/classify/tutorial.ipynb",
        "yolov5/classify/val.py",
        "yolov5/data/Argoverse.yaml",
        "yolov5/data/coco.yaml",
        "yolov5/data/coco128-seg.yaml",
        "yolov5/data/coco128.yaml",
        "yolov5/data/GlobalWheat2020.yaml",
        "yolov5/data/ImageNet.yaml",
        "yolov5/data/ImageNet10.yaml",
        "yolov5/data/ImageNet100.yaml",
        "yolov5/data/ImageNet1000.yaml",
        "yolov5/data/Objects365.yaml",
        "yolov5/data/SKU-110K.yaml",
        "yolov5/data/VisDrone.yaml",
        "yolov5/data/VOC.yaml",
        "yolov5/data/xView.yaml",
        "yolov5/data/hyps/hyp.no-augmentation.yaml",
        "yolov5/data/hyps/hyp.Objects365.yaml",
        "yolov5/data/hyps/hyp.scratch-high.yaml",
        "yolov5/data/hyps/hyp.scratch-low.yaml",
        "yolov5/data/hyps/hyp.scratch-med.yaml",
        "yolov5/data/hyps/hyp.VOC.yaml",
        "yolov5/data/scripts/download_weights.sh",
        "yolov5/data/scripts/get_coco.sh",
        "yolov5/data/scripts/get_coco128.sh",
        "yolov5/data/scripts/get_imagenet.sh",
        "yolov5/data/scripts/get_imagenet10.sh",
        "yolov5/data/scripts/get_imagenet100.sh",
        "yolov5/data/scripts/get_imagenet1000.sh",
        "yolov5/models/common.py",
        "yolov5/models/experimental.py",
        "yolov5/models/tf.py",
        "yolov5/models/yolo.py",
        "yolov5/models/yolov5l.yaml",
        "yolov5/models/yolov5m.yaml",
        "yolov5/models/yolov5n.yaml",
        "yolov5/models/yolov5s.yaml",
        "yolov5/models/yolov5x.yaml",
        "yolov5/models/hub/anchors.yaml",
        "yolov5/models/hub/yolov3-spp.yaml",
        "yolov5/models/hub/yolov3-tiny.yaml",
        "yolov5/models/hub/yolov3.yaml",
        "yolov5/models/hub/yolov5-bifpn.yaml",
        "yolov5/models/hub/yolov5-fpn.yaml",
        "yolov5/models/hub/yolov5-p2.yaml",
        "yolov5/models/hub/yolov5-p34.yaml",
        "yolov5/models/hub/yolov5-p6.yaml",
        "yolov5/models/hub/yolov5-p7.yaml",
        "yolov5/models/hub/yolov5-panet.yaml",
        "yolov5/models/hub/yolov5l6.yaml",
        "yolov5/models/hub/yolov5m6.yaml",
        "yolov5/models/hub/yolov5n6.yaml",
        "yolov5/models/hub/yolov5s-ghost.yaml",
        "yolov5/models/hub/yolov5s-LeakyReLU.yaml",
        "yolov5/models/hub/yolov5s-transformer.yaml",
        "yolov5/models/hub/yolov5s6.yaml",
        "yolov5/models/hub/yolov5x6.yaml",
        "yolov5/models/segment/yolov5l-seg.yaml",
        "yolov5/models/segment/yolov5m-seg.yaml",
        "yolov5/models/segment/yolov5n-seg.yaml",
        "yolov5/models/segment/yolov5s-seg.yaml",
        "yolov5/models/segment/yolov5x-seg.yaml",
        "yolov5/segment/predict.py",
        "yolov5/segment/train.py",
        "yolov5/segment/tutorial.ipynb",
        "yolov5/segment/val.py",
        "yolov5/utils/activations.py",
        "yolov5/utils/augmentations.py",
        "yolov5/utils/autoanchor.py",
        "yolov5/utils/autobatch.py",
        "yolov5/utils/callbacks.py",
        "yolov5/utils/dataloaders.py",
        "yolov5/utils/downloads.py",
        "yolov5/utils/general.py",
        "yolov5/utils/loss.py",
        "yolov5/utils/metrics.py",
        "yolov5/utils/plots.py",
        "yolov5/utils/torch_utils.py",
        "yolov5/utils/triton.py",
        "yolov5/utils/__init__.py",
        "yolov5/utils/aws/mime.sh",
        "yolov5/utils/aws/resume.py",
        "yolov5/utils/aws/userdata.sh",
        "yolov5/utils/docker/Dockerfile",
        "yolov5/utils/docker/Dockerfile-arm64",
        "yolov5/utils/docker/Dockerfile-cpu",
        "yolov5/utils/flask_rest_api/example_request.py",
        "yolov5/utils/flask_rest_api/README.md",
        "yolov5/utils/flask_rest_api/restapi.py",
        "yolov5/utils/google_app_engine/additional_requirements.txt",
        "yolov5/utils/google_app_engine/app.yaml",
        "yolov5/utils/loggers/__init__.py",
        "yolov5/utils/loggers/clearml/clearml_utils.py",
        "yolov5/utils/loggers/clearml/hpo.py",
        "yolov5/utils/loggers/clearml/README.md",
        "yolov5/utils/loggers/clearml/__init__.py",
        "yolov5/utils/loggers/comet/comet_utils.py",
        "yolov5/utils/loggers/comet/hpo.py",
        "yolov5/utils/loggers/comet/optimizer_config.json",
        "yolov5/utils/loggers/comet/README.md",
        "yolov5/utils/loggers/comet/__init__.py",
        "yolov5/utils/loggers/wandb/wandb_utils.py",
        "yolov5/utils/loggers/wandb/__init__.py",
        "yolov5/utils/segment/augmentations.py",
        "yolov5/utils/segment/dataloaders.py",
        "yolov5/utils/segment/general.py",
        "yolov5/utils/segment/loss.py",
        "yolov5/utils/segment/metrics.py",
        "yolov5/utils/segment/plots.py",
        "yolov5/utils/segment/__init__.py",
        "__pycache__/export.cpython-37.pyc",
        "__pycache__/export.cpython-39.pyc",
        "__pycache__/openalpr_ocr.cpython-37.pyc",
        "__pycache__/openalpr_ocr.cpython-39.pyc"
    ]

    for dir_path in dirs:
        full_path = os.path.join(base_path, dir_path)
        os.makedirs(full_path, exist_ok=True)  # Create directory, no error if it exists

    for file_path in files:
        full_path = os.path.join(base_path, file_path)
        # Create empty file only if it doesn't exist
        if not os.path.exists(full_path):
            os.makedirs(os.path.dirname(full_path), exist_ok=True)  # Ensure dir exists
            with open(full_path, 'w') as f:
                pass  # Create an empty file

if __name__ == "__main__":
    project_root = os.getcwd()  # Get the current working directory
    create_folder_structure(project_root)
    print("Folder structure created.")